// Code generated by go-bindata.
// sources:
// pub/index.css
// pub/index.html
// pub/index.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexCss = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\xd1\x6a\xdc\x30\x10\x7c\xbf\xaf\x58\xb8\x87\x24\x10\x15\xc5\x69\x0e\x4e\x81\x7e\x44\xdf\xfa\x28\x4b\x2b\x9f\x88\xac\x35\x92\x8c\x7d\x29\xf9\xf7\xca\xd2\xd9\x49\xd3\x04\x52\xb0\xc1\xde\x9d\x65\x76\x67\xa6\x25\x7d\x86\xdf\x3b\x80\x56\xaa\xa7\x2e\xd0\xe8\xb5\x80\xbd\x31\xe6\x31\xd7\x0c\xf9\xc4\x8c\xec\xad\x3b\x0b\xb8\xfa\x29\x1d\x4e\xf2\x7c\x75\x0b\x51\xfa\xc8\x22\x06\xfb\x8a\x8a\xf6\x19\x05\x7c\x6f\x86\x79\x2b\x4d\x68\xbb\x53\x12\x70\xcf\xf9\xe3\xee\x65\xb7\x33\x14\xfa\x42\x95\x70\x4e\x4c\x3a\xdb\x79\x01\x0a\x7d\xc2\x50\xfa\xfb\x31\xb8\xd2\xff\x6f\xda\xfb\x4f\x69\x01\x26\xab\xd3\x49\xc0\x81\xf3\x8a\xe9\x65\xe8\x6c\x26\xe6\x20\xc7\x44\x4b\x65\x90\x5a\x5b\xdf\x09\x68\x1e\x2a\x44\x91\xa3\x90\x55\x38\x1e\x8f\xcb\x6f\x4b\x41\x63\x60\x41\x6a\x3b\xc6\x7c\x63\x05\xd5\xaa\x80\xbb\x61\x86\x48\xce\x6a\xd8\x2b\xa5\x96\x0e\x8d\xc9\x59\x9f\xd7\xf2\xe4\xb1\x42\x67\x16\x4f\x52\xd3\xb4\xd0\xe6\x5d\xe1\x90\xdf\xd0\xb5\xf2\x9a\xdf\xc2\xe5\xf9\xd6\xdc\x6c\x2a\x08\x43\x6a\x8c\xd5\x96\x7f\x69\xf8\xd1\xbc\x22\x45\xbe\xb7\x7d\xb2\x89\x59\x3f\x8c\x89\x0d\x4e\x2a\x3c\x91\xcb\x33\x65\x7c\xbb\x45\x6b\xfd\x76\xa8\xa7\xe7\x2f\x60\x55\x3f\xbc\xcb\x06\x5b\x31\x88\xf8\xa1\x76\x17\xb9\x1f\x0e\x9f\xca\xfd\xd6\x7d\x87\x26\xbd\xf3\xb2\xb9\xab\x83\x29\x64\xb7\x6d\xb2\x94\x61\xe5\xbb\xc4\xa7\xe1\xbc\x8f\x80\x32\x62\x3e\x98\x65\xa5\x37\xe8\xd2\x16\x10\x55\x4e\xcb\xaf\x6b\x7e\xf3\x57\x9d\x51\xb0\x65\x8b\x44\xc3\x96\xb8\xcd\xd8\x96\x52\xa2\x9e\x2d\xbb\x7c\x6c\xf2\x8a\x08\x4b\xb0\xbe\x9a\x83\x55\xbf\x1f\x20\x8b\x86\xab\x70\xc5\xbd\x8b\x0a\x1a\x15\x05\x59\x6f\xac\x61\x79\xf9\x13\x00\x00\xff\xff\xd4\x2f\x34\x18\x90\x03\x00\x00"

func indexCssBytes() ([]byte, error) {
	return bindataRead(
		_indexCss,
		"index.css",
	)
}

func indexCss() (*asset, error) {
	bytes, err := indexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.css", size: 912, mode: os.FileMode(420), modTime: time.Unix(1435805882, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x41\x73\xd3\x30\x10\x85\xef\xfd\x15\x8b\xce\x44\x9b\x10\x0e\xa4\xd8\x66\x86\x24\x43\x99\x29\xd0\x29\x61\x80\xa3\x6a\xaf\x63\x05\xd9\x72\xa5\x75\x13\xff\x7b\x24\xdb\x29\x4c\xe9\x09\x9f\x56\xd2\xbe\xef\xad\x9e\x9c\xbc\xd8\x7c\x59\xef\x7e\xde\x6c\xa1\xe2\xda\xc0\xcd\xb7\xf7\xd7\x1f\xd7\x20\x66\x88\xdf\x97\x6b\xc4\xcd\x6e\x03\x3f\xae\x76\x9f\xae\x61\x21\xe7\xf0\x95\x9d\xce\x19\x71\xfb\x59\x80\xa8\x98\xdb\x4b\xc4\xe3\xf1\x28\x8f\x4b\x69\xdd\x1e\x77\xb7\x78\x8a\x94\x45\x94\x4d\xe5\xcc\x0f\x1a\x59\x70\x21\xb2\x8b\x64\x30\x39\xd5\xa6\xf1\xe9\x33\x80\xc5\x6a\xb5\x1a\x75\xa1\x17\x20\xa9\x48\x15\xb1\x08\x25\x6b\x36\x94\x7d\xb0\x09\x8e\xd5\xb8\x5b\x13\x2b\x88\x9c\x19\xdd\x77\xfa\x21\x15\x6b\xdb\x30\x35\x3c\xdb\xf5\x2d\x09\xc8\xc7\x55\x2a\x98\x4e\x8c\x91\xfb\x16\xf2\x4a\x39\x4f\x9c\x76\x5c\xce\xde\x08\x9c\x40\x46\x37\xbf\xa0\x72\x54\xa6\x02\x3d\xea\xa6\xa0\x93\xcc\xbd\x17\xc3\x69\xfc\x1c\x99\x54\x78\xee\x0d\xf9\x8a\x88\xff\x1c\x70\x70\x9a\x0c\xa2\x20\x83\x7f\x80\xd3\x3d\xcb\x30\x8c\x97\x7b\x6b\xf7\x86\x54\xab\xbd\xcc\x6d\x1d\x25\xef\x4a\x55\x6b\xd3\xa7\xb7\xca\xd0\x51\xf5\x97\xaf\xe7\xf3\x97\xcb\xf9\xfc\x3f\xac\x63\x64\x78\xce\x2c\xb9\xb3\x45\x3f\xdd\xae\xb4\xae\x06\xd5\xb1\x0d\x96\xad\x21\x0e\x2a\x5b\x96\x22\x9b\x48\x89\x6e\xda\x8e\xff\xc2\x09\xd0\x45\x2a\x3a\x67\x04\xb4\x46\xe5\x54\x59\x53\x90\x4b\xc5\x36\xc4\xe9\x80\x2b\x82\x70\x06\x6c\xc1\x57\xd6\x85\x84\x45\x96\xe0\xc0\x78\x24\x16\xfa\x61\x60\xe4\x75\xfb\x68\x73\x45\xc6\xd8\x73\x03\x86\x8e\x69\x3a\x8c\xe3\x65\x17\xe3\xc2\xe7\x4e\xb7\x0c\xde\xe5\xe1\x25\x50\x1d\xd4\xe9\x69\x64\x71\x0f\x8d\xbe\xf3\x78\xb8\xef\xc8\xf5\xf8\x4a\x2e\xe4\x72\x5a\xc8\x5a\x37\xf2\xe0\xe3\x40\x23\x29\x7b\x06\x7b\x7e\xe0\xa7\x7d\x09\x8e\x99\x25\xc3\xaf\x92\x5d\xfc\x0e\x00\x00\xff\xff\x48\x15\x39\x70\x1c\x03\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 796, mode: os.FileMode(420), modTime: time.Unix(1435805882, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _indexJs = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\xcd\x6f\x13\x3f\x10\xbd\xf7\xaf\xf0\x4f\xbf\x4a\xb6\x45\xea\xb4\x70\xa3\xe2\xc0\x47\x11\x42\x15\x45\xb4\x17\x84\x38\x0c\xbb\x93\xc4\xc5\x6b\xaf\x6c\x6f\x3f\x68\xf3\xbf\x33\x63\x6f\x36\x09\x42\x88\x03\x97\xc4\x3b\x1f\xcf\x6f\xde\xbc\x5d\xb5\x18\x7c\x93\x6d\xf0\x4a\x8b\x87\x83\x83\x1b\x88\x22\x62\xb2\x3f\x50\xbc\x10\x7b\x29\x21\x6a\xae\xc9\x9c\x09\xb1\x33\x4b\xcc\xea\x58\xf3\xdf\xab\x30\xf8\xd6\xfa\xe5\x6b\x67\xd1\xe7\x4f\x54\xa3\xf4\x29\x75\x94\xb2\x26\x25\x25\x3b\x88\x4b\xeb\x8f\x72\xe8\xe5\x4c\xdc\x5a\xdf\x86\x5b\x63\xbd\xc7\xf8\x0e\xed\x72\x95\xe7\xcf\xc4\x51\xc1\x36\xab\xfa\xfc\x94\xfa\xd7\xa7\x95\x8f\x87\x0e\xdf\xc6\xd0\xed\x32\x1a\xa2\xdd\x92\xea\x21\xe6\x44\x59\x0a\x9a\x34\x7c\x4b\x39\x12\x17\x75\xa2\x4d\xea\x9d\xcd\x4a\xce\x65\x61\x13\x31\x0f\xd1\xd7\xea\x2f\x27\x5f\xb7\x17\xb8\x00\xed\xef\xc7\xe5\xab\x29\xb3\x61\xa0\x5c\x68\x80\x4b\x4c\x0f\x79\xc5\xd1\x02\x7c\x68\xe0\x1a\xee\x14\x37\x09\x22\xe1\x9e\x0b\x39\x87\xde\xce\xe9\x38\x97\xe2\x49\x69\x9f\x95\x64\x0b\x19\xae\xee\x7b\xa4\x8a\xeb\x14\xbc\xa4\xe0\x9a\x68\x0e\x4d\x83\xa4\xd2\x44\x80\xcb\x2a\x89\x4a\x83\x80\x88\x05\x47\x0d\x1f\x1f\x1f\x85\x94\xa7\x25\x7b\xa8\xe4\xff\x14\x92\xda\xdc\x80\x23\x55\x5c\x21\xb4\x66\xf5\xea\x6c\x69\x15\x6e\xcf\xad\xff\xbe\x3b\x5f\x21\x3e\xcd\xd8\x74\x3d\x25\x19\x88\x4e\x52\x57\xa2\x42\xb8\xd2\x33\x0d\x1c\xa2\xa5\x05\xd2\x30\x72\x1a\x89\xd4\xab\x08\x50\xfa\xdb\xd0\x0c\x1d\xad\xdf\x34\x11\x21\xe3\x99\x43\x7e\x52\x12\xa4\xd6\x05\xd3\x40\xce\x51\xc9\x55\xc4\x05\x99\x80\xf0\xc7\x70\xc6\xbb\xac\xb6\x8f\xd0\xf7\xe8\xdb\xab\xa0\x88\x4e\xcd\x49\x42\x28\x97\x71\xa4\xd8\x29\x47\xf0\x89\xdd\x45\x40\x32\x35\xe0\xf0\x33\xed\x5b\xd6\x2a\x32\xe4\x25\x3a\x1c\x77\x69\x12\xf9\x13\x12\xbe\xf4\xed\xd9\x5d\x66\x46\x30\x3a\x77\x26\x8e\x67\x62\xfb\x70\xb2\x63\x39\x86\xae\xa2\x94\x4b\xb4\x21\x24\x49\xd6\xea\x6c\xa6\x1b\x27\x21\x47\x15\xd1\xf4\x11\x6f\x08\xfa\x0d\x2e\x60\x70\xa3\xf9\xff\xce\x3f\x1b\xb9\xeb\x8a\xf7\xd7\xa9\x0d\x39\xb9\x53\x75\x2a\xbb\x10\xea\x3f\x5e\xf0\xe8\x8b\xea\xe6\xb2\xed\x83\x5f\x3d\x98\xab\xc5\x3e\x5e\x5c\x5e\xc9\xd9\xc6\x95\xe2\xcf\xb6\xa4\xf4\xfb\xcb\x8b\x0f\xa6\xbe\x3d\x76\x71\xaf\x1e\xc6\x2e\xfe\x5d\xeb\x7d\x03\x8b\x7f\xe6\x60\x9e\x6b\x67\x2c\x31\x39\x56\x4d\xef\x17\x8f\x38\x9a\x9a\xb5\x18\x3f\x1f\xd0\xb6\x67\x2c\xfa\xb9\x4d\xb4\x56\x24\x67\xd5\x0f\x17\x2d\xa8\x1e\xa8\xb6\x1e\x58\x41\x7e\xc7\x8b\x92\x6b\x4d\x7f\x3f\x03\x00\x00\xff\xff\xd4\x6d\x20\xd5\xf6\x04\x00\x00"

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 1270, mode: os.FileMode(420), modTime: time.Unix(1435805882, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.css": indexCss,
	"index.html": indexHtml,
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.css": &bintree{indexCss, map[string]*bintree{
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
	"index.js": &bintree{indexJs, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

