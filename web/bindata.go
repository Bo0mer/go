// Code generated by go-bindata.
// sources:
// pub/close.svg
// pub/index.css
// pub/index.html
// pub/index.js
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _closeSvg = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\x8e\xd1\xca\x84\x20\x14\x84\x5f\xe5\x70\xee\xff\xa3\x1e\xc9\xfc\x97\xec\x62\xaf\xdb\x87\x58\x28\x32\x68\xb7\xd8\x24\x63\x9f\x7e\xd5\x02\x19\xc6\x6f\x66\xc4\x66\xdb\x47\x38\x5e\xf3\x7b\x73\xe8\x43\x58\x6f\x42\xc4\x18\x29\x6a\x5a\x3e\xa3\x60\x29\xa5\x48\x0d\x84\x38\xf5\xc1\x3b\xd4\x06\xc1\x0f\xd3\xe8\xc3\xe9\xf7\x69\x88\xf7\xe5\x70\x28\x41\x82\x36\xe9\x60\xdb\xac\xcf\xe0\xa1\x77\xf8\x60\x4b\x15\xfc\x93\xe1\x8e\x0d\x69\x0b\x75\xba\x2a\x0b\xaa\x22\x6b\x0b\x2f\xa4\xbe\x4a\x17\x57\x67\xaf\x2c\x66\x26\xc5\x90\xa5\x4b\x98\x65\x32\xb3\xcd\x2f\x15\xc9\xfc\xaf\x84\x25\x49\xcb\x2f\x8a\xb6\xc9\x1f\x6e\x7f\x01\x00\x00\xff\xff\xe5\x79\xbd\x91\xd8\x00\x00\x00"

func closeSvgBytes() ([]byte, error) {
	return bindataRead(
		_closeSvg,
		"close.svg",
	)
}

func closeSvg() (*asset, error) {
	bytes, err := closeSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "close.svg", size: 216, mode: os.FileMode(420), modTime: time.Unix(1435948337, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _indexCss = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xdd\x6e\xdb\x3c\x0c\xbd\xcf\x53\x08\xed\x45\x1b\xa0\x4e\xd5\xe4\x4b\xf0\x45\x05\xf6\x10\xbb\xdb\x25\x2d\xd1\x8e\x50\xd9\x34\x24\x39\x3f\x1d\xf6\xee\xd3\x8f\x7f\xb2\xac\x05\x3a\x20\x09\x6c\xf2\x90\x3a\x3c\x3c\x4a\x49\xea\xc2\x7e\x2e\x18\x2b\x41\xbe\xd5\x96\xfa\x56\x09\x76\x5f\x55\xd5\x6b\x88\x55\xd4\xfa\xa2\x82\x46\x9b\x8b\x60\x0f\xdf\xc1\xe0\x09\x2e\x0f\x4f\xcc\x41\xeb\x0a\x87\x56\xcf\x28\xa7\xdf\x51\xb0\xff\xd6\xdd\x79\x0a\x9d\x50\xd7\x07\x2f\xd8\x86\xf3\xd7\xc5\xaf\xc5\xa2\x22\xdb\xa4\xa3\x3c\x9e\x7d\x01\x46\xd7\xad\x60\x12\x5b\x8f\x36\xe5\xef\x4b\xb0\x29\x7f\xd2\xca\x1f\x04\xdb\x6d\x87\x6e\x0d\xd8\x5a\x07\x2c\x67\xd0\x7b\x8a\x91\x8e\x9c\xf6\x9a\x42\xcc\xa2\x01\xaf\x8f\x98\x3b\xf4\xd6\xa4\x0e\xff\x4c\x7c\xf3\x29\xf1\x99\x0e\xe7\x19\xd3\x81\x52\xba\xad\x05\x5b\x6f\x73\x40\x92\x21\x1b\x54\xdb\xef\xf7\xf1\xb5\x24\xab\xd0\x16\x16\x94\xee\x5d\xd0\x24\x83\x72\x54\xb0\x97\xee\xcc\x1c\x19\xad\xd8\xbd\x94\x32\x66\xa8\xf7\x46\xb7\x81\x44\x4b\x2d\x66\xe8\xb9\x70\x07\x50\x74\x8a\x33\x07\x66\x6c\x17\xbe\xb6\x2e\xe1\x91\x3f\xb1\xe1\xb3\x5a\x2f\xa7\x99\x45\x45\xb2\x77\x79\x8d\x7f\x1f\xc3\xf7\xd5\x8c\x14\x61\xba\xf2\x4d\xfb\x42\xb7\x5d\xef\x8b\xce\x80\xc4\x03\x99\x50\x93\xca\xa7\x59\x94\x52\xd7\x45\x0d\xbd\x7f\x01\x2b\x9b\xee\xc6\x4b\xc5\x88\x41\xc4\x0f\xb5\x1b\xc4\xdd\xee\xf8\x67\xbb\xbe\x76\x8b\xc1\xca\xdf\x6c\x6e\xfd\x92\x0b\xbd\x0d\xbb\x1d\x4c\x91\x9e\x93\xdd\xd6\x9c\x37\x8e\x21\x38\x0c\x03\x17\x41\xe9\x09\x1a\xd3\x82\x39\x19\xbc\xf1\xe3\x91\x2f\xff\x88\x17\x64\x75\x62\xe1\xa9\x9b\x1c\x3a\x2d\xb6\x24\xef\xa9\x29\x22\x97\x8f\x97\x3c\x22\x6c\xb4\xd1\x57\x7d\x30\xea\xf7\x8d\x41\xd2\x70\x14\x2e\x6d\x6f\x50\x41\xa1\x24\x0b\x79\xc6\x6c\x96\x54\x65\xf2\xea\xe7\x4b\x01\x65\xe8\xdc\xfb\xa4\x78\x18\x21\xa8\x19\x9f\x6c\x76\x35\xcf\x2c\x22\xc3\xe1\x65\x34\xf8\xc8\x70\xde\x9e\x6e\xa0\x0e\x1a\x07\x0f\x3c\xde\x3d\xbb\x67\x69\xc8\xe1\xca\x1d\xeb\xbb\xe5\x0d\x70\x3e\x3b\xcb\x75\xad\xda\x8c\xb2\xd8\x21\xf8\xc8\x7d\x78\xbc\xc9\x0f\x7f\x22\xff\x07\x69\xe2\x4f\xba\x5b\xbd\x75\x51\x87\x8e\xf4\xd8\x90\x3a\x90\xda\x87\x8b\xcd\x57\x9b\x49\x01\x71\xa0\xe3\xe0\xcb\xab\xfc\x2e\xe6\x7f\x07\x00\x00\xff\xff\xcf\xf1\x6a\x9a\xe3\x04\x00\x00"

func indexCssBytes() ([]byte, error) {
	return bindataRead(
		_indexCss,
		"index.css",
	)
}

func indexCss() (*asset, error) {
	bytes, err := indexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.css", size: 1251, mode: os.FileMode(420), modTime: time.Unix(1435949343, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\x4d\x73\xd3\x30\x10\xbd\xf7\x57\x2c\x3a\x13\x6d\x42\x38\x90\x62\x87\x19\x92\x0c\x30\x53\xa0\x53\xc2\x00\x47\xc5\x5e\xc7\x0a\xb2\xe5\x4a\xeb\x26\xfe\xf7\x48\xb6\xdb\x86\xd2\x13\x3a\xed\xd7\x7b\x6f\x3f\x94\xbc\x58\x7f\x5d\x6d\x7f\x5d\x6f\xa0\xe4\xca\xc0\xf5\xf7\xf7\x57\x9f\x56\x20\x26\x88\x3f\xe6\x2b\xc4\xf5\x76\x0d\x3f\x3f\x6e\x3f\x5f\xc1\x4c\x4e\xe1\x1b\x3b\x9d\x31\xe2\xe6\x8b\x00\x51\x32\x37\x97\x88\xc7\xe3\x51\x1e\xe7\xd2\xba\x3d\x6e\x6f\xf0\x14\x59\x66\x11\x36\x9a\x13\xdf\x63\x64\xce\xb9\x58\x5e\x24\xbd\xc8\xa9\x32\xb5\x4f\x9f\x21\x98\x2d\x16\x8b\x01\x17\x6a\x01\x92\x92\x54\x1e\x8d\x60\xb2\x66\x43\xcb\x0f\x36\xc1\xc1\x1a\xa2\x15\xb1\x82\xc8\x33\xa1\xdb\x56\xdf\xa5\x62\x65\x6b\xa6\x9a\x27\xdb\xae\x21\x01\xd9\xe0\xa5\x82\xe9\xc4\x18\x79\xdf\x42\x56\x2a\xe7\x89\xd3\x96\x8b\xc9\x1b\x81\x23\x91\xd1\xf5\x6f\x28\x1d\x15\xa9\x40\x8f\xba\xce\xe9\x24\x33\xef\x45\x9f\x8d\xcf\x91\x49\x85\xe7\xce\x90\x2f\x89\xf8\x31\xc1\x41\x69\x14\x88\x80\x7f\xf9\xc6\x31\x8b\xd0\x8b\x97\x7b\x6b\xf7\x86\x54\xa3\xbd\xcc\x6c\x15\x11\xef\x0a\x55\x69\xd3\xa5\x37\xca\xd0\x51\x75\x97\xaf\xa7\xd3\x97\xf3\xe9\xf4\xff\x94\x13\xbc\x5f\x59\xb2\xb3\x79\x37\x36\x53\x58\x57\x81\x6a\xd9\x06\xc9\xc6\x10\x07\x94\x2d\x8a\xb1\xd5\x90\xcf\xf5\x1d\xe8\x3c\x15\x3b\xe5\x1e\x82\x67\xe1\xcc\x04\xf2\x04\x83\x7b\x96\xd4\x75\xd3\xf2\x59\x0b\xa2\x2f\x6d\x9d\x11\xd0\x18\x95\x51\x69\x4d\x4e\x2e\x15\x9b\x70\x01\x07\x5c\x12\x84\x1c\xb0\x05\x5f\x5a\x17\x8e\x12\x19\x7b\x8e\x87\x2e\xce\x05\x1e\xb5\xab\xe6\x2f\xed\x04\xe3\x30\xcb\x8b\xc1\xf1\x99\xd3\x0d\x83\x77\x59\x38\x1b\xaa\x83\x3a\x3d\x5d\x70\x8c\xa1\xd1\x3b\x8f\x87\xdb\x96\x5c\x87\xaf\xe4\x4c\xce\x47\x47\x56\xba\x96\x87\x7e\xb8\x81\x69\xf9\x0c\xed\xfd\x6f\x78\x5a\x97\xe0\xb0\xe1\xa4\xff\x57\xcb\x8b\x3f\x01\x00\x00\xff\xff\xfc\x61\x6a\x79\x49\x03\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 841, mode: os.FileMode(420), modTime: time.Unix(1435948513, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _indexJs = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x4d\x6f\xd4\x30\x10\xbd\xf7\x57\x18\x51\xc9\xb6\x48\xbd\x2d\xdc\xa8\x38\xf0\x51\x84\x50\x45\x11\xdb\x0b\x42\x1c\x86\x64\x76\xe3\xe2\xd8\x91\xed\x74\xbb\xb4\xf9\xef\x8c\xed\xec\x57\x85\x10\x62\x0f\x1b\x7b\x66\x3c\xf3\x66\xde\xb3\xc5\x62\xb0\x75\xd4\xce\x0a\xc9\xee\x8f\x8e\x6e\xc1\x33\x8f\x41\xff\x42\xf6\x8a\x1d\xb8\x18\x2b\xbe\x3a\x26\x8f\xf3\x9d\x5a\x62\x14\xa7\x32\x7d\xde\xb8\xc1\x36\xda\x2e\xdf\x1a\x8d\x36\x7e\xa1\x18\x21\xcf\xe9\x44\x0e\xab\x43\x10\xbc\x03\xbf\xd4\xf6\x24\xba\x9e\x57\x6c\xa5\x6d\xe3\x56\x4a\x5b\x8b\xfe\x03\xea\x65\x1b\x67\x2f\xd8\x49\xce\xad\xda\xb2\x7f\x4e\xe7\xc7\xf3\x82\xc7\x42\x87\xef\xbd\xeb\xf6\x11\x0d\x5e\xef\x40\xf5\xe0\x63\x20\x2f\x19\x55\x18\x7e\x84\xe8\x09\x8b\x38\x93\x2a\xf4\x46\x47\xc1\x67\x3c\xa3\xf1\x18\x07\x6f\x4b\xf4\xb7\xb3\xef\xbb\x02\xc6\x41\xf3\xe7\x76\x53\x69\xf2\x6c\x10\x08\xe3\x6a\x48\x21\xaa\x87\xd8\x26\x6b\x4e\x7c\xac\xe0\x06\xee\x44\x3a\xc4\x08\x84\x79\xc9\xf8\x0c\x7a\x3d\xa3\xe5\x8c\xb3\x67\xf9\x78\x95\x9d\x0d\x44\xb8\x5e\xf7\x48\x11\x37\xc1\x59\x4e\xc6\x51\x2a\x30\x2b\x58\x87\x1d\x13\x29\xaa\x60\x28\x28\x28\x0f\x81\x48\x56\x95\x96\x0f\x0f\x8c\xf3\xf3\xec\x3d\x16\xfc\x29\x99\xb8\x54\xb7\x60\x68\x28\x46\x66\x33\x63\x6a\xe1\xea\x21\x14\x16\xc6\x34\xcb\xd2\x69\x68\xdd\xea\x52\xdb\x9f\xfb\xdd\xe6\x36\xb6\x1d\xd7\x5d\x4f\xce\x94\x97\x56\x5c\x56\x53\x3e\x93\xcf\x6c\xdb\x77\x5e\x13\x9d\xd4\x1a\xdf\x36\x48\xb3\x2c\x19\x20\x9f\x6f\xa8\x7e\x47\x62\x50\xb5\x47\x88\x78\x61\x30\xed\x04\x07\x2e\x0b\x46\x05\x31\x7a\xc1\x5b\x8f\x0b\x92\x04\xe5\x9f\xcc\x11\xef\xa2\xd8\x6d\xa1\xef\xd1\x36\xd7\x4e\x10\x9c\xe2\xe3\x94\x21\x17\x4b\x96\x2c\xae\xe8\xc1\x86\xa4\x35\x4a\xc4\x43\x0d\x06\xbf\x12\xfb\xbc\x44\x91\x3c\xe7\x68\x70\x62\x56\x05\x52\x2b\x04\x7c\x6d\x9b\x8b\xbb\x98\x10\xc1\xa4\xe3\x8a\x9d\x56\x6c\xb7\x39\xdb\x13\x60\x4a\x5d\x86\x92\x8b\x48\x45\x99\x38\x09\xad\xd3\x91\x2a\x6e\x07\x39\x4d\x11\x55\xef\xf1\x96\x52\xbf\xc3\x05\x0c\x66\xba\x0a\xff\xa6\xa6\xcd\xb8\x0b\xe3\x87\xec\x4a\x45\xba\xee\x44\xe9\x4a\x2f\x98\x78\x92\xf8\x9e\x64\x52\xb4\x9d\xd9\x3e\x7a\xac\xc8\x58\x04\xf7\xf9\x6a\x7e\xcd\xab\x8d\x46\xd9\xdf\x45\x4a\xee\x8f\xf3\xab\x4f\xaa\xdc\x25\xbd\x58\x8b\xfb\xe9\x54\xfa\x1f\xe5\xa1\x9c\xd9\xa1\x9e\xc3\x50\xd7\x18\xfe\x4b\xd0\xa9\xaf\xbd\xb6\x18\x6b\x75\x88\xce\xaf\x95\xc7\xde\x40\x8d\xf3\x48\x62\x12\xf7\x63\xc5\xec\x60\x0c\xd1\x3d\xc3\x46\xc7\xdc\x40\x4e\xb7\xbd\x93\xe9\xb7\x51\xbb\x78\xec\x1a\x37\xb7\x22\x0d\x73\x7a\x8d\xa0\x69\x2e\x12\x6b\x97\x54\x10\xe9\x61\x12\xbc\xbc\x83\xc4\x70\x59\x50\x6c\x59\x24\x0a\xd2\x93\x91\xa9\x18\x65\xfa\xfc\x0e\x00\x00\xff\xff\x5e\xed\x70\xa4\x46\x05\x00\x00"

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 1350, mode: os.FileMode(420), modTime: time.Unix(1435934318, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"close.svg": closeSvg,
	"index.css": indexCss,
	"index.html": indexHtml,
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"close.svg": &bintree{closeSvg, map[string]*bintree{
	}},
	"index.css": &bintree{indexCss, map[string]*bintree{
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
	"index.js": &bintree{indexJs, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

